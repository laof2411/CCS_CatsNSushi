//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputActions/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""8a69277b-a6cd-4a49-ad48-bc4cbc9cd5d5"",
            ""actions"": [
                {
                    ""name"": ""Walking"",
                    ""type"": ""Value"",
                    ""id"": ""06cea86f-9228-421b-957a-7cca11557fc7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UseBench"",
                    ""type"": ""Button"",
                    ""id"": ""2b722b89-bc6e-45b0-88ca-8c89d0067b05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""690879b7-fd94-4373-aa90-51af231945b8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9ebfd479-93c2-4ca5-8557-55523f4614b4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bf1d07cc-66fe-4579-ae8d-698c634b52b5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e8801bf2-1b2e-41c3-bf10-ba83106816b4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d55ff235-9735-494f-9980-55947defcc41"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ARROWS"",
                    ""id"": ""8d3b29ab-7afc-491f-b4c8-809effa5c164"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a2263292-09d1-4a7b-abec-2199539c6f4c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""683e3840-0e8a-4997-87cd-4bb55903cab7"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0f66fb0f-bf41-47b3-a536-d9bbe414a3ce"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6cf06198-35f9-4401-832e-6ae8fc6d8234"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""95c15c96-5a45-44da-8f3f-f8818825d1fd"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseBench"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraRotation"",
            ""id"": ""565917e3-89a6-46ed-977c-624d4a3e1406"",
            ""actions"": [
                {
                    ""name"": ""RotateRight"",
                    ""type"": ""Button"",
                    ""id"": ""a8d2a5c7-14d8-49d5-9038-1c39a520bc8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""4ba0102c-c3e9-4dda-978d-daa522fb549f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ff599004-9e4a-4aea-ab25-c74d9abeaa74"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e494a656-afad-4c14-ae7d-90d340546f13"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InteractionSystem"",
            ""id"": ""78b06d4c-8c27-4926-932e-d8f01a9f3296"",
            ""actions"": [
                {
                    ""name"": ""UseInteractable"",
                    ""type"": ""Button"",
                    ""id"": ""1392b32b-d231-4756-b254-ad27914fc9b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickAndLeaveObject"",
                    ""type"": ""Button"",
                    ""id"": ""d6d8940f-7601-4523-bc4c-da4b41f9d2cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""acd226d2-222b-43a5-ab73-d9d20c4231c6"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseInteractable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6f05b95-bf9d-46c6-bb73-a60614a25d2b"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickAndLeaveObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_Walking = m_PlayerMovement.FindAction("Walking", throwIfNotFound: true);
        m_PlayerMovement_UseBench = m_PlayerMovement.FindAction("UseBench", throwIfNotFound: true);
        // CameraRotation
        m_CameraRotation = asset.FindActionMap("CameraRotation", throwIfNotFound: true);
        m_CameraRotation_RotateRight = m_CameraRotation.FindAction("RotateRight", throwIfNotFound: true);
        m_CameraRotation_RotateLeft = m_CameraRotation.FindAction("RotateLeft", throwIfNotFound: true);
        // InteractionSystem
        m_InteractionSystem = asset.FindActionMap("InteractionSystem", throwIfNotFound: true);
        m_InteractionSystem_UseInteractable = m_InteractionSystem.FindAction("UseInteractable", throwIfNotFound: true);
        m_InteractionSystem_PickAndLeaveObject = m_InteractionSystem.FindAction("PickAndLeaveObject", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_Walking;
    private readonly InputAction m_PlayerMovement_UseBench;
    public struct PlayerMovementActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walking => m_Wrapper.m_PlayerMovement_Walking;
        public InputAction @UseBench => m_Wrapper.m_PlayerMovement_UseBench;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @Walking.started += instance.OnWalking;
            @Walking.performed += instance.OnWalking;
            @Walking.canceled += instance.OnWalking;
            @UseBench.started += instance.OnUseBench;
            @UseBench.performed += instance.OnUseBench;
            @UseBench.canceled += instance.OnUseBench;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @Walking.started -= instance.OnWalking;
            @Walking.performed -= instance.OnWalking;
            @Walking.canceled -= instance.OnWalking;
            @UseBench.started -= instance.OnUseBench;
            @UseBench.performed -= instance.OnUseBench;
            @UseBench.canceled -= instance.OnUseBench;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // CameraRotation
    private readonly InputActionMap m_CameraRotation;
    private List<ICameraRotationActions> m_CameraRotationActionsCallbackInterfaces = new List<ICameraRotationActions>();
    private readonly InputAction m_CameraRotation_RotateRight;
    private readonly InputAction m_CameraRotation_RotateLeft;
    public struct CameraRotationActions
    {
        private @PlayerControls m_Wrapper;
        public CameraRotationActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateRight => m_Wrapper.m_CameraRotation_RotateRight;
        public InputAction @RotateLeft => m_Wrapper.m_CameraRotation_RotateLeft;
        public InputActionMap Get() { return m_Wrapper.m_CameraRotation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraRotationActions set) { return set.Get(); }
        public void AddCallbacks(ICameraRotationActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraRotationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraRotationActionsCallbackInterfaces.Add(instance);
            @RotateRight.started += instance.OnRotateRight;
            @RotateRight.performed += instance.OnRotateRight;
            @RotateRight.canceled += instance.OnRotateRight;
            @RotateLeft.started += instance.OnRotateLeft;
            @RotateLeft.performed += instance.OnRotateLeft;
            @RotateLeft.canceled += instance.OnRotateLeft;
        }

        private void UnregisterCallbacks(ICameraRotationActions instance)
        {
            @RotateRight.started -= instance.OnRotateRight;
            @RotateRight.performed -= instance.OnRotateRight;
            @RotateRight.canceled -= instance.OnRotateRight;
            @RotateLeft.started -= instance.OnRotateLeft;
            @RotateLeft.performed -= instance.OnRotateLeft;
            @RotateLeft.canceled -= instance.OnRotateLeft;
        }

        public void RemoveCallbacks(ICameraRotationActions instance)
        {
            if (m_Wrapper.m_CameraRotationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraRotationActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraRotationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraRotationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraRotationActions @CameraRotation => new CameraRotationActions(this);

    // InteractionSystem
    private readonly InputActionMap m_InteractionSystem;
    private List<IInteractionSystemActions> m_InteractionSystemActionsCallbackInterfaces = new List<IInteractionSystemActions>();
    private readonly InputAction m_InteractionSystem_UseInteractable;
    private readonly InputAction m_InteractionSystem_PickAndLeaveObject;
    public struct InteractionSystemActions
    {
        private @PlayerControls m_Wrapper;
        public InteractionSystemActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @UseInteractable => m_Wrapper.m_InteractionSystem_UseInteractable;
        public InputAction @PickAndLeaveObject => m_Wrapper.m_InteractionSystem_PickAndLeaveObject;
        public InputActionMap Get() { return m_Wrapper.m_InteractionSystem; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionSystemActions set) { return set.Get(); }
        public void AddCallbacks(IInteractionSystemActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractionSystemActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractionSystemActionsCallbackInterfaces.Add(instance);
            @UseInteractable.started += instance.OnUseInteractable;
            @UseInteractable.performed += instance.OnUseInteractable;
            @UseInteractable.canceled += instance.OnUseInteractable;
            @PickAndLeaveObject.started += instance.OnPickAndLeaveObject;
            @PickAndLeaveObject.performed += instance.OnPickAndLeaveObject;
            @PickAndLeaveObject.canceled += instance.OnPickAndLeaveObject;
        }

        private void UnregisterCallbacks(IInteractionSystemActions instance)
        {
            @UseInteractable.started -= instance.OnUseInteractable;
            @UseInteractable.performed -= instance.OnUseInteractable;
            @UseInteractable.canceled -= instance.OnUseInteractable;
            @PickAndLeaveObject.started -= instance.OnPickAndLeaveObject;
            @PickAndLeaveObject.performed -= instance.OnPickAndLeaveObject;
            @PickAndLeaveObject.canceled -= instance.OnPickAndLeaveObject;
        }

        public void RemoveCallbacks(IInteractionSystemActions instance)
        {
            if (m_Wrapper.m_InteractionSystemActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractionSystemActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractionSystemActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractionSystemActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractionSystemActions @InteractionSystem => new InteractionSystemActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayerMovementActions
    {
        void OnWalking(InputAction.CallbackContext context);
        void OnUseBench(InputAction.CallbackContext context);
    }
    public interface ICameraRotationActions
    {
        void OnRotateRight(InputAction.CallbackContext context);
        void OnRotateLeft(InputAction.CallbackContext context);
    }
    public interface IInteractionSystemActions
    {
        void OnUseInteractable(InputAction.CallbackContext context);
        void OnPickAndLeaveObject(InputAction.CallbackContext context);
    }
}
